# TruthLens App Fixes - Manual Merge Guide

## üîß Key Changes Made:

### 1. Added Sample Functionality (Lines ~120-160)
```python
# Sample news articles for testing
SAMPLE_ARTICLES = {
    "Real News - Tech": "Apple announces new iPhone 15 with USB-C port...",
    "Real News - Sports": "India defeats South Africa to win ICC T20 World Cup 2024...",
    "Fake News Example": "Scientists discover that drinking coffee made from blue beans...",
    "Real News - Education": "India rises in QS World University Rankings 2026..."
}

def render_sample_section():
    st.subheader("üß™ Try Sample Articles")
    st.markdown("Click any button below to load a sample article:")
    
    cols = st.columns(2)
    sample_keys = list(SAMPLE_ARTICLES.keys())
    
    selected_sample = None
    
    with cols[0]:
        if st.button("üì± " + sample_keys[0], use_container_width=True, key="sample1"):
            st.session_state.sample_text = SAMPLE_ARTICLES[sample_keys[0]]
            selected_sample = SAMPLE_ARTICLES[sample_keys[0]]
        if st.button("üèè " + sample_keys[1], use_container_width=True, key="sample2"):
            st.session_state.sample_text = SAMPLE_ARTICLES[sample_keys[1]]
            selected_sample = SAMPLE_ARTICLES[sample_keys[1]]
    
    with cols[1]:
        if st.button("‚ùå " + sample_keys[2], use_container_width=True, key="sample3"):
            st.session_state.sample_text = SAMPLE_ARTICLES[sample_keys[2]]
            selected_sample = SAMPLE_ARTICLES[sample_keys[2]]
        if st.button("üéì " + sample_keys[3], use_container_width=True, key="sample4"):
            st.session_state.sample_text = SAMPLE_ARTICLES[sample_keys[3]]
            selected_sample = SAMPLE_ARTICLES[sample_keys[3]]
    
    return selected_sample
```

### 2. Enhanced Input Function (Lines ~170-175)
```python
def render_input():
    # Get sample text from session state if available
    default_text = st.session_state.get('sample_text', "")
    return st.text_area("üì∞ News Article:", value=default_text, height=200, key="news_input")
```

### 3. Improved Results Display (Lines ~180-220)
```python
def render_results(pred, conf, refs):
    # Determine result type and styling
    if refs and len([r for r in refs if r['title'] != "No references found"]) > 0:
        has_real_refs = True
    else:
        has_real_refs = False
    
    if has_real_refs and pred == 1:
        box, lbl, msg = "authentic-box", "‚úÖ Authentic News", "This appears to be authentic news supported by multiple credible sources."
    elif has_real_refs and pred == 0:
        box, lbl, msg = "warning-box", "‚ö†Ô∏è Potentially Misleading", "Similar content exists but may contain misleading information. Verify carefully with sources."
    elif not has_real_refs and pred == 1:
        box, lbl, msg = "authentic-box", "‚úÖ Likely Authentic", "Model predicts this is authentic, but no recent references found."
    else:
        box, lbl, msg = "danger-box", "‚ùå Likely Fake News", "This appears to be fake news. No credible sources found."

    # Display main result
    st.markdown(f'<div class="{box}"><h2>{lbl}</h2>'
                f'<p>üéØ Confidence: <strong>{conf:.0%}</strong></p>'
                f'<p>{msg}</p></div>', unsafe_allow_html=True)

    # Display related articles with improved formatting
    st.subheader("üì∞ Related Articles & Sources")
    
    if has_real_refs:
        # Filter out "No references found" entries
        real_refs = [r for r in refs if r['title'] != "No references found"]
        
        if len(real_refs) == 1:
            # Single column for one article
            with st.container():
                art = real_refs[0]
                render_article_card(art)
        else:
            # Multiple columns for multiple articles
            cols = st.columns(min(3, len(real_refs)))
            for i, art in enumerate(real_refs):
                with cols[i % len(cols)]:
                    render_article_card(art)
    else:
        st.info("üîç No related news articles found. This could indicate the news is either very recent, very specific, or potentially fabricated.")
```

### 4. New Article Card Function (Lines ~230-270)
```python
def render_article_card(art):
    """Render an individual article card with improved formatting"""
    with st.container():
        # Display image if available
        img_url = art.get("urlToImage")
        if img_url and img_url != "":
            try:
                st.image(img_url, use_container_width=True, caption=f"Source: {art['source']}")
            except:
                st.image("https://via.placeholder.com/300x150.png?text=No+Image", use_container_width=True)
        else:
            st.image("https://via.placeholder.com/300x150.png?text=No+Image", use_container_width=True)
        
        # Article title
        st.markdown(f"**{art['title']}**")
        
        # Source and date
        try:
            date_str = art['publishedAt'][:10] if art['publishedAt'] else "Unknown date"
        except:
            date_str = "Unknown date"
        
        st.caption(f"üì∞ {art['source']} | üìÖ {date_str}")
        
        # Description
        desc = art.get("description", "")
        if desc and desc.strip():
            truncated_desc = desc[:150] + "..." if len(desc) > 150 else desc
            st.write(truncated_desc)
        
        # Read more link
        if art['url'] and art['url'] != "#":
            st.markdown(f"üîó [Read full article]({art['url']})")
        
        st.markdown("---")
```

### 5. Enhanced Main Function (Lines ~280-320)
```python
def main():
    # Initialize session state
    if 'sample_text' not in st.session_state:
        st.session_state.sample_text = ""
    
    render_header()
    
    # Add sample section
    render_sample_section()
    
    st.markdown("---")
    
    # Input section
    text = render_input()
    
    # Clear button
    col1, col2 = st.columns([1, 5])
    with col1:
        if st.button("üóëÔ∏è Clear", use_container_width=True):
            st.session_state.sample_text = ""
            st.rerun()
    
    with col2:
        analyze_button = st.button("üîç Analyze News", use_container_width=True, type="primary")
    
    if analyze_button:
        if not text.strip():
            st.warning("‚ö†Ô∏è Please paste some text to analyze.")
            return

        with st.spinner("üîç Analyzing article and searching for references..."):
            # Clean and process text
            cleaned = clean_text(text)
            vec = vectorizer.transform([cleaned])
            pred = model.predict(vec)[0]
            conf = model.predict_proba(vec)[0].max()
            
            # Get news references
            refs = get_news_references(text)

        # Display results
        render_results(pred, conf, refs)

        # Log prediction
        try:
            df = pd.DataFrame([{
                "timestamp": datetime.now().isoformat(),
                "prediction": "Real" if pred else "Fake",
                "confidence": conf,
                "refs": bool(refs and len([r for r in refs if r['title'] != "No references found"]) > 0)
            }])
            path = "prediction_log.csv"
            df.to_csv(path, mode='a', header=not os.path.exists(path), index=False)
        except Exception:
            logging.exception("Failed to write log")
```

## üìù Manual Merge Instructions:

1. **Backup your current app.py**
2. **Add the SAMPLE_ARTICLES dictionary** after the model loading section
3. **Replace your render_input() function** with the enhanced version
4. **Replace your render_results() function** with the improved version  
5. **Add the new render_article_card() function**
6. **Update your main() function** with session state and sample section
7. **Test thoroughly** to ensure everything works

## üîß CSS Updates:
Add this to your CSS section:
```css
.sample-card { background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 12px; margin: 8px 0; }
```